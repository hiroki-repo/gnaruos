#include "stdcall.as"
#include "migs_stabilizer.as"
if windowisnotfirstrun=0{
windowisnotfirstrun=1
}
if mainlpjump=1{goto *mainlp}
dehlforchk=0
mainlpjump=1
#module
#deffunc z80memaccess int prm_0,int prm_1,int prm_2
switch prm_2
case 0
poke memory@,prm_0,prm_1
return
swbreak
case 1
return peek(memory@,prm_0)
swbreak
case 2
switch prm_0&0xFF
case 0
syscallid=prm_1
swbreak
case 1
poke dehlforchk@,0,prm_1
swbreak
case 2
poke dehlforchk@,1,prm_1
swbreak
case 3
poke dehlforchk@,2,prm_1
swbreak
case 4
poke dehlforchk@,3,prm_1
swbreak
case 5
swbreak
case 6
poke pid@,0,prm_1
swbreak
case 7
poke windowtaskenable@,0,prm_1
swbreak
case 8
poke windowx@,0,prm_1
swbreak
case 9
poke windowy@,0,prm_1
swbreak
case 10
poke windowmaxx@,0,prm_1
swbreak
case 11
poke windowmaxy@,0,prm_1
swbreak
case 12
poke windowenabled@,0,prm_1
swbreak
case 13
poke windowisnotfirstrun@,0,prm_1
swbreak
case 14
poke mclick@,0,prm_1
swbreak
case 15
poke windowenableedforpid@,0,prm_1
swbreak
case 16
poke mx@,0,prm_1
swbreak
case 17
poke my@,0,prm_1
swbreak
case 18
poke inkey@,0,prm_1
swbreak
case 19
poke iconno@,0,prm_1
swbreak
case 20
poke enableicon@,0,prm_1
swbreak
swend
return
swbreak
case 3
switch prm_0&0xFF
case 0
ret=syscall(7,syscallid,wpeek(dehlforchk@,0),wpeek(dehlforchk@,2))
if hspstat&1{logmes@hsp "syscallptraddressesresult:"+strf("%08X",dehlforchk@)}
wpoke dehlforchk@,2,wpeek(syscallopt@stdcallinterface(3),0)
return ret
swbreak
case 1
return peek(dehlforchk@,0)
swbreak
case 2
return peek(dehlforchk@,1)
swbreak
case 3
return peek(dehlforchk@,2)
swbreak
case 4
return peek(dehlforchk@,3)
swbreak
case 5
wpoke dehlforchk@,2,syscall(wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*1))&0xFFFF),wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*2))&0xFFFF),wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*3))&0xFFFF),wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*4))&0xFFFF),wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*5))&0xFFFF),wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*6))&0xFFFF),wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*7))&0xFFFF),wpeek(memory,(wpeek(stack@z80moduleaccess(0),12)+(2*8))&0xFFFF))
wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*1))&0xFFFF,syscallopt(0):wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*2))&0xFFFF,syscallopt(1):wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*3))&0xFFFF,syscallopt(2):wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*4))&0xFFFF,syscallopt(3):wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*5))&0xFFFF,syscallopt(4):wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*6))&0xFFFF,syscallopt(5):wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*7))&0xFFFF,syscallopt(6):wpoke memory,(wpeek(stack@z80moduleaccess(0),12)+(2*8))&0xFFFF,syscallopt(7)
return peek(dehlforchk@,2)
swbreak
case 6
return pid@
swbreak
case 7
return windowtaskenable@
swbreak
case 8
return windowx@
swbreak
case 9
return windowy@
swbreak
case 10
return windowmaxx@
swbreak
case 11
return windowmaxy@
swbreak
case 12
return windowenabled@
swbreak
case 13
return windowisnotfirstrun@
swbreak
case 14
return mclick@
swbreak
case 15
return windowenableedforpid@
swbreak
case 16
return mx@
swbreak
case 17
return my@
swbreak
case 18
return inkey@
swbreak
case 19
return iconno@
swbreak
case 20
return enableicon@
swbreak
swend
return 0xFF
swbreak
swend
return 0
#global
#include "z80.as"
sdim memory,65536
cmdline="":cmdline=oscmdline:repeat:if strmid(cmdline,cnt,1)=" "{cmdline=strmid(cmdline,1,strlen(cmdline))}else{break}:loop:sdim cmdname,128,512:i=0:for cntx,0,strlen(cmdline),1:if peek(cmdline,cntx)=' '{i=i+1}else{cmdlinesliced="":poke cmdlinesliced,0,peek(cmdline,cntx):cmdname(i)=cmdname(i)+cmdlinesliced}:next
cmdlinearg=""
cmdlinearginstr=-1:for cntx,0,strlen(cmdline),1:if peek(cmdline,cntx)=' '{cmdlinearginstr=cntx:_break}:next
if cmdlinearginstr!=-1{for cntx,0,(strlen(cmdline)-cmdlinearginstr),1:poke cmdlinearg,cntx,peek(cmdline,cmdlinearginstr+cntx):next}
memcpy memory,cmdlinearg,strlen(cmdlinearg),0x81,0
poke memory,0x80,strlen(cmdlinearg)
ret=syscall(7,25,0x80)
storexint=-1:dirlistvarx=""+cmdname(1):for cntx,0,strlen(dirlistvarx),1:if peek(dirlistvarx,cntx)>='a' and peek(dirlistvarx,cntx)<='z'{poke dirlistvarx,cntx,peek(dirlistvarx,cntx)-32}:next:dirlistvarx2="":storex="":for cntx,0,8,1:if peek(dirlistvarx,cntx)='.'{storexint=cntx:_break}else{storexy="":poke storexy,0,peek(dirlistvarx,cntx):storex=storex+storexy}:next:memcpy memory,storex,strlen(storex),0x5c+1,0:if storexint=-1{storex=""}else{storex="":for cntx,0,3,1:poke storex,cntx,peek(dirlistvarx,storexint+1+cntx):next}:memcpy memory,storex,3,0x5c+1+8,0
storexint=-1:dirlistvarx=""+cmdname(2):for cntx,0,strlen(dirlistvarx),1:if peek(dirlistvarx,cntx)>='a' and peek(dirlistvarx,cntx)<='z'{poke dirlistvarx,cntx,peek(dirlistvarx,cntx)-32}:next:dirlistvarx2="":storex="":for cntx,0,8,1:if peek(dirlistvarx,cntx)='.'{storexint=cntx:_break}else{storexy="":poke storexy,0,peek(dirlistvarx,cntx):storex=storex+storexy}:next:memcpy memory,storex,strlen(storex),0x6c+1,0:if storexint=-1{storex=""}else{storex="":for cntx,0,3,1:poke storex,cntx,peek(dirlistvarx,storexint+1+cntx):next}:memcpy memory,storex,3,0x6c+1+8,0
cmdnamexyz=""
cmdnamexyz=cmdname(0)+".COM":exist cmdname(0)+".COM":strsize2=strsize
if strsize2=-1{cmdnamexyz=cmdname(0):exist cmdname(0):strsize2=strsize}
if strsize2!-1{
sdim pdata,strsize2
bload cmdnamexyz,pdata
memcpy memory,pdata,strsize2,0x100,0
}
poke memory,0x0000,0xC3
wpoke memory,0x0001,0xFB00
poke memory,0x0005,0xC3
wpoke memory,0x0006,0xFE00
poke memory,0x0008,0xC3
wpoke memory,0x0009,0xFE40
poke memory,0x0010,0xC3
wpoke memory,0x0011,0xFE60


poke memory,0xFB00,0x0E
poke memory,0xFB01,0x00
poke memory,0xFB02,0xC3
wpoke memory,0xFB03,0x0005
poke memory,0xFB05,0xC3
wpoke memory,0xFB06,0xFB05

poke memory,0xFC00,0x31
wpoke memory,0xFC01,0xFA00
poke memory,0xFC03,0xC3
wpoke memory,0xFC04,0x0100

poke memory,0xFE00,0x7B
poke memory,0xFE01,0xD3
poke memory,0xFE02,0x01
poke memory,0xFE03,0x7A
poke memory,0xFE04,0xD3
poke memory,0xFE05,0x02
poke memory,0xFE06,0x7D
poke memory,0xFE07,0xD3
poke memory,0xFE08,0x03
poke memory,0xFE09,0x7C
poke memory,0xFE0A,0xD3
poke memory,0xFE0B,0x04
poke memory,0xFE0C,0x79
poke memory,0xFE0D,0xD3
poke memory,0xFE0E,0x00
poke memory,0xFE0F,0xDB
poke memory,0xFE10,0x00
poke memory,0xFE11,0x32
wpoke memory,0xFE12,0xFE20
poke memory,0xFE14,0xDB
poke memory,0xFE15,0x03
poke memory,0xFE16,0x6F
poke memory,0xFE17,0xDB
poke memory,0xFE18,0x04
poke memory,0xFE19,0x67
poke memory,0xFE1A,0x3A
wpoke memory,0xFE1B,0xFE20
poke memory,0xFE1D,0xC9

poke memory,0xFE40,0x32
wpoke memory,0xFE41,0xFE20
poke memory,0xFE43,0xDB
poke memory,0xFE44,0x05
poke memory,0xFE45,0xDB
poke memory,0xFE46,0x03
poke memory,0xFE47,0x6F
poke memory,0xFE48,0xDB
poke memory,0xFE49,0x04
poke memory,0xFE4A,0x67
poke memory,0xFE4B,0x3A
wpoke memory,0xFE4D,0xFE20
poke memory,0xFE4E,0xC9

poke memory,0xFE60,0x32
wpoke memory,0xFE61,0xFE20
poke memory,0xFE63,0x79
poke memory,0xFE64,0xC6
poke memory,0xFE65,0x06
poke memory,0xFE66,0x4F
poke memory,0xFE67,0x78
poke memory,0xFE68,0xFE
poke memory,0xFE69,0x00
poke memory,0xFE6A,0xCA
wpoke memory,0xFE6B,0xFE73
poke memory,0xFE6D,0xED
poke memory,0xFE6E,0x68
poke memory,0xFE6F,0x3A
wpoke memory,0xFE70,0xFE20
poke memory,0xFE72,0xC9
poke memory,0xFE73,0xED
poke memory,0xFE74,0x69
poke memory,0xFE75,0x3A
wpoke memory,0xFE76,0xFE20
poke memory,0xFE78,0xC9
address=0xFC00
*mainlp
ret=syscall(8,varptr(memory))
repeat 4200
z80run address,0
loop
return